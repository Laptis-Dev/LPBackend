/*
 * Copyright (c) 2025 Laptis
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions :
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include <cxx_detect.h>
#include <fmt/compile.h>
#include <fmt/format.h>
#include <lpbackend/version.hpp>

namespace lpbackend
{
const std::string release_version{"@RELEASE_VERSION@"};

const std::string branch_name{"@BRANCH_NAME@"};

const std::string commit_hash{"@COMMIT_HASH@"};

const std::string full_version{fmt::format("LPBackend {} [git {}:{}]"
#if CXX_CLANG
                                           " [clang {}.{}.{}]"
#elif CXX_GNU
                                           " [gcc {}.{}.{}]"
#elif CXX_MSC
                                           " [msvc {}.{}.{}]"
#elif CXX_INTEL
                                           " [icc {}.{}.{}]"
#endif
#if !defined(NDEBUG) || defined(_DEBUG)
                                           " [debug]"
#endif
                                           ,
                                           release_version, branch_name, commit_hash,
#if CXX_CLANG
                                           CXX_CLANG / 10000000, (CXX_CLANG % 10000000) / 100000, CXX_CLANG % 100000
#elif CXX_GNU
                                           CXX_GNU / 10000000, (CXX_GNU % 10000000) / 100000, CXX_GNU % 100000
#elif CXX_MSC
                                           CXX_MSC / 10000000, (CXX_MSC % 10000000) / 100000, CXX_MSC % 100000
#elif CXX_INTEL
                                           CXX_INTEL / 10000000, (CXX_INTEL % 10000000) / 100000, CXX_INTEL % 100000
#endif
                                           )};

const std::string user_agent{fmt::format("LPBackend/{}", release_version)};
} // namespace lpbackend
